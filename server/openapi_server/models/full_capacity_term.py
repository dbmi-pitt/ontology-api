# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class FullCapacityTerm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, term=None, tty=None, code=None, concept=None, perfterm=None, semantic=None):  # noqa: E501
        """FullCapacityTerm - a model defined in OpenAPI

        :param term: The term of this FullCapacityTerm.  # noqa: E501
        :type term: str
        :param tty: The tty of this FullCapacityTerm.  # noqa: E501
        :type tty: str
        :param code: The code of this FullCapacityTerm.  # noqa: E501
        :type code: str
        :param concept: The concept of this FullCapacityTerm.  # noqa: E501
        :type concept: str
        :param perfterm: The perfterm of this FullCapacityTerm.  # noqa: E501
        :type perfterm: str
        :param semantic: The semantic of this FullCapacityTerm.  # noqa: E501
        :type semantic: str
        """
        self.openapi_types = {
            'term': str,
            'tty': str,
            'code': str,
            'concept': str,
            'perfterm': str,
            'semantic': str
        }

        self.attribute_map = {
            'term': 'term',
            'tty': 'tty',
            'code': 'code',
            'concept': 'concept',
            'perfterm': 'perfterm',
            'semantic': 'semantic'
        }

        self._term = term
        self._tty = tty
        self._code = code
        self._concept = concept
        self._perfterm = perfterm
        self._semantic = semantic

    @classmethod
    def from_dict(cls, dikt) -> 'FullCapacityTerm':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FullCapacityTerm of this FullCapacityTerm.  # noqa: E501
        :rtype: FullCapacityTerm
        """
        return util.deserialize_model(dikt, cls)

    @property
    def term(self):
        """Gets the term of this FullCapacityTerm.


        :return: The term of this FullCapacityTerm.
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this FullCapacityTerm.


        :param term: The term of this FullCapacityTerm.
        :type term: str
        """

        self._term = term

    @property
    def tty(self):
        """Gets the tty of this FullCapacityTerm.


        :return: The tty of this FullCapacityTerm.
        :rtype: str
        """
        return self._tty

    @tty.setter
    def tty(self, tty):
        """Sets the tty of this FullCapacityTerm.


        :param tty: The tty of this FullCapacityTerm.
        :type tty: str
        """

        self._tty = tty

    @property
    def code(self):
        """Gets the code of this FullCapacityTerm.


        :return: The code of this FullCapacityTerm.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this FullCapacityTerm.


        :param code: The code of this FullCapacityTerm.
        :type code: str
        """

        self._code = code

    @property
    def concept(self):
        """Gets the concept of this FullCapacityTerm.


        :return: The concept of this FullCapacityTerm.
        :rtype: str
        """
        return self._concept

    @concept.setter
    def concept(self, concept):
        """Sets the concept of this FullCapacityTerm.


        :param concept: The concept of this FullCapacityTerm.
        :type concept: str
        """

        self._concept = concept

    @property
    def perfterm(self):
        """Gets the perfterm of this FullCapacityTerm.


        :return: The perfterm of this FullCapacityTerm.
        :rtype: str
        """
        return self._perfterm

    @perfterm.setter
    def perfterm(self, perfterm):
        """Sets the perfterm of this FullCapacityTerm.


        :param perfterm: The perfterm of this FullCapacityTerm.
        :type perfterm: str
        """

        self._perfterm = perfterm

    @property
    def semantic(self):
        """Gets the semantic of this FullCapacityTerm.


        :return: The semantic of this FullCapacityTerm.
        :rtype: str
        """
        return self._semantic

    @semantic.setter
    def semantic(self, semantic):
        """Sets the semantic of this FullCapacityTerm.


        :param semantic: The semantic of this FullCapacityTerm.
        :type semantic: str
        """

        self._semantic = semantic
